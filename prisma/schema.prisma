generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model RegistrationCode {
  id        Int    @id @default(autoincrement())
  code      String @unique
  timesUsed Int    @default(0)
  // maxUses   Int    // null is infinite

  ServerSettings   ServerSettings? @relation(fields: [serverSettingsId], references: [id])
  serverSettingsId Int?
}

model ServerSettings {
  id Int @id @unique @default(1)

  registrationPossible Boolean            @default(false)
  registrationCodes    RegistrationCode[]
}

model Account {
  id            String @id @default(cuid())
  username      String @unique
  password_hash String
  password_salt String @default("")

  isAdmin        Boolean @default(false)
  isPublic       Boolean @default(false)
  onlyToLoggedIn Boolean @default(false)

  books Book[]

  bookList        BookList[]
  ReadingActivity ReadingActivity[]
}

// enum Visibility {
//   PUBLIC
//   PRIVATE
//   UNLISTED
// }

model BookList {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]

  // visibility Visibility @default(PRIVATE)
  visibility String @default("private")

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@unique([name, accountId])
}

model BookSeries {
  id    Int    @id @default(autoincrement())
  books Book[]
}

model BookApiData {
  id            String         @id
  title         String
  authors       String //TODO: author relation?
  subtitle      String?
  thumbnailUrl  String?
  isbn_13       String?
  pageCount     Int?
  categories    BookCategory[]
  publishedDate String? //YYYY-MM-DD
  publisher     String?
  language      String

  book Book[]
}

model BookCategory {
  name  String        @id
  books BookApiData[]
}

model OptionalDatetime {
  id    Int  @id @default(autoincrement())
  day   Int? // Optional day (1-31)
  month Int? // Optional month (1-12)
  year  Int

  hour   Int?
  minute Int?

  timezoneOffset Int? // timezone offset minutes 

  booksStarted  ReadingActivity[] @relation("dateStarted")
  booksFinished ReadingActivity[] @relation("dateFinished")
}

model Graph {
  id    Int    @id @default(autoincrement())
  title String

  data    String
  labels  String
  details String

  readingActivity   ReadingActivity @relation(fields: [readingActivityId], references: [id], onDelete: Cascade)
  readingActivityId Int
}

model ReadingActivity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  dateStarted    OptionalDatetime? @relation("dateStarted", fields: [dateStartedId], references: [id])
  dateFinished   OptionalDatetime? @relation("dateFinished", fields: [dateFinishedId], references: [id])
  dateStartedId  Int?
  dateFinishedId Int?

  status String // reading, finished, did not finish, paused

  storyGraphs Graph[]
  rating      Rating?
}

model Book {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  author     String
  coverImage String?

  // monthRead Int?
  // yearRead  Int?

  // bookListName String?
  bookListId Int?
  bookList   BookList? @relation(fields: [bookListId], references: [id])

  bookSeriesId Int?
  bookSeries   BookSeries? @relation(fields: [bookSeriesId], references: [id])

  bookApiData   BookApiData? @relation(fields: [bookApiDataId], references: [id])
  bookApiDataId String?

  wordsPerPage Int?

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
  // @@unique([name, author, accountId])

  readingActivity ReadingActivity[]

  location       String?
  recommendation String?
}

model Rating {
  ratingId          Int             @id @default(autoincrement())
  stars             Float
  comment           String?
  readingActivity   ReadingActivity @relation(fields: [readingActivityId], references: [id], onDelete: Cascade)
  readingActivityId Int             @unique
}
